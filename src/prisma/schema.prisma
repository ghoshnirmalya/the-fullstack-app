generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  forums              Forum[]
  accounts            Account[]
  sessions            Session[]
  forumComments       ForumComment[]
  forumCommentReplies ForumCommentReply[]
  blogs               Blog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Forum {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  creatorId String

  author   User           @relation(fields: [creatorId], references: [id])
  comments ForumComment[]
}

model ForumComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  forumId   Int
  authorId  String

  forum               Forum               @relation(fields: [forumId], references: [id])
  author              User                @relation(fields: [authorId], references: [id])
  forumCommentReplies ForumCommentReply[]
}

model ForumCommentReply {
  id             Int      @id @default(autoincrement())
  content        String
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  forumCommentId Int
  authorId       String

  forumComment ForumComment @relation(fields: [forumCommentId], references: [id])
  author       User         @relation(fields: [authorId], references: [id])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  creatorId String

  author User @relation(fields: [creatorId], references: [id])
}
